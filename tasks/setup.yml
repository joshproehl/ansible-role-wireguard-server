---
- name: Include specific vars
  include_vars: "{{ item }}"
  with_first_found:
    - "../vars/{{ ansible_os_family }}.yml"
    - "../vars/empty.yml"

- name: Change facts to use netfilter-persistent on Debian >= 9 or Ubuntu >= 16
  set_fact:
    iptables_save_command: "/usr/sbin/netfilter-persistent save"
    iptables_service: netfilter-persistent
  when: >-
    (ansible_distribution == 'Debian' and ansible_distribution_version|int >= 9)
    or
    (ansible_distribution == 'Ubuntu' and ansible_lsb.major_release|int >= 16)

- name: install buster-backports repo
  apt_repository:
    repo: deb http://deb.debian.org/debian buster-backports main
    state: present
    update_cache: yes
  when: ansible_distribution_release == "buster"

- name: install required packages
  apt:
    pkg:
      - wireguard
      - qrencode
      - iptables-persistent
      - netfilter-persistent # Debian >10 uses netfilter with the iptables-nf translation layer
      - unbound
    state: present
    update_cache: yes
  when: ansible_os_family == "Debian"

- name: ensure wireguard conf dir
  tags: [ show_wg_client_conf ]
  file:
    path: "{{ wg_conf_path }}"
    state: directory
  register: wg_conf_dir

- name: Update SystemCtl Settings
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: yes
  when: ansible_os_family == "Debian"

- name: ensure wireguard port through firewall open
  ansible.builtin.iptables: 
    chain: INPUT
    protocol: udp
    destination_port: "{{ wg_port }}"
    jump: ACCEPT
  when: ansible_os_family == "Debian"

- name: create server keys
  ansible.builtin.shell:
    chdir: "{{ wg_conf_dir.path }}"
    cmd: |
      if [ ! -f server_privkey ] || [ ! -f server_pubkey ]; then
        umask 077 && wg genkey | tee server_privkey | wg pubkey > server_pubkey
        echo "GENERATED NEW SERVER KEYS"
      fi
  # TODO: Capture if these have been regenerated and ensure that gets alerted. (Clients won't work anymore!)

- name: get server pubkey
  ansible.builtin.slurp:
    src: "{{ wg_conf_dir.path }}/server_pubkey"
  register: server_pubkey

- name: get server privkey
  ansible.builtin.slurp:
    src: "{{ wg_conf_dir.path }}/server_privkey"
  register: server_privkey

- name: allow traffic from clients to the internet
  ansible.builtin.iptables:
    chain: FORWARD
    source: "{{ wg_subnet.network }}{{ wg_subnet.cidr }}"
    jump: ACCEPT
    action: insert
    comment: "Allow forwarding from WG clients to internet"
  #notify: "save iptables"
 
- name: Perform NAT readdressing - iptables
  iptables:
    table: nat
    chain: POSTROUTING
    source: "{{ wg_subnet.network }}{{ wg_subnet.cidr }}"
    to_source: "{{ ansible_default_ipv4.address }}"
    jump: SNAT
    action: insert
    comment: "WG client NAT readdressing"
  when: not wg_masquerade_not_snat
  #notify: "save iptables"

- name: Perform NAT readdressing with MASQUERADE - iptables
  iptables:
    table: nat
    chain: POSTROUTING
    source: "{{ openvpn_server_network }}/24"
    jump: MASQUERADE
    action: insert
    comment: "WG client NAT readdressing"
  when: wg_masquerade_not_snat
  #notify: "save iptables"

- name: block traffic between clients by default
  ansible.builtin.iptables:
    chain: FORWARD
    source: "{{ wg_subnet.network }}{{ wg_subnet.cidr }}"
    destination: "{{ wg_subnet.network }}{{ wg_subnet.cidr }}"
    jump: DROP

- name: allow traffic from the subnet to the server
  ansible.builtin.iptables:
    chain: FORWARD
    source: "{{ wg_subnet.network }}{{ wg_subnet.cidr }}"
    destination: "{{ wg_subnet.server_ip }}"
    jump: ACCEPT
  when: wg_subnet.block_client_communication is undefined or wg_subnet.block_client_communication != False

- name: register the server public IPv4 address
  uri: 
    url: "https://ipv4.icanhazip.com"
    remote_src: yes
    return_content: yes
  register: use_server_public_ipv4
  when: server_public_ipv4 is undefined

- name: register provided server public IPv4 address
  set_fact:
    use_server_public_ipv4: "{'content': '{{ server_public_ipv4 }}'}"
  when: server_public_ipv4 is defined

- name: template Unbound config
  template:
    src: "unbound.conf"
    dest: "/etc/unbound/unbound.conf.d/road-warrior-server.conf"
  notify: restart unbound
  when: enable_unbound != False

- name: ensure Unbound running
  systemd:
    name: "unbound"
    state: started
    enabled: yes
  when: enable_unbound != False

- name: ensure Unbound not running
  systemd:
    name: "unbound"
    state: stopped
    enabled: no
  when: enable_unbound == False

- name: remove Unbound config
  ansible.builtin.file:
    path: "/etc/unbound/unbound.conf.d/road-warrior-server.conf"
    state: absent
  when: enable_unbound == False
