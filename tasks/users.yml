---
- name: create client config direcory
  file:
    path: "{{ wg_conf_dir.path }}/{{ item.name }}"
    state: directory
  loop: "{{ wg_clients }}"
  when: item.remove is undefined or item.remove != True

- name: remove client config direcory
  file:
    path: "{{ wg_conf_dir.path }}/{{ item.name }}"
    state: absent
  loop: "{{ wg_clients }}"
  when: item.remove is defined and item.remove == True

- name: generate wg client keys
  ansible.builtin.shell:
    chdir: "{{ wg_conf_dir.path}}/{{ item.name }}"
    cmd: |
      if [ ! -f privatekey ] || [ ! -f publickey ]; then
        wg genkey | tee privatekey | wg pubkey > publickey
        echo "GENERATED NEW KEYS FOR CLIENT: {{ item.name }}"
      fi
  when: item.remove is undefined or item.remove != True
  loop: "{{ wg_clients }}"
  # TODO: Capture if these have been regenerated and ensure that gets alerted. (This client will no longer work if keys are regenerated)

- name: fetch client public key
  ansible.builtin.slurp:
    src: "{{ wg_conf_dir.path}}/{{ item.name }}/publickey"
  loop: "{{ wg_clients }}"
  register: wg_clients_publickeys
  when: item.remove is undefined or item.remove != True

- name: fetch client private key
  ansible.builtin.slurp:
    src: "{{ wg_conf_dir.path}}/{{ item.name }}/privatekey"
  loop: "{{ wg_clients }}"
  register: wg_clients_privatekeys
  when: item.remove is undefined or item.remove != True

#- debug:
    #msg: "{{ wg_clients_publickeys }}"
#- debug:
     #msg: "{{ wg_clients_privatekeys }}"

- name: generate client config
  template:
    src: "wg0-client.conf.j2"
    dest: "{{ wg_conf_dir.path}}/{{ item.item.name }}/wg0.conf"
  loop: "{{ wg_clients_privatekeys.results }}"
  when: item.item.remove is undefined or item.item.remove != True

- name: generate server config with clients
  template:
    src: wg0-server.conf.j2
    dest: "{{ wg_conf_dir.path }}/wg0.conf"
    mode: 0640
  #loop: "{{ wg_clients_publickeys.results }}"
  #when: item.item.remove is undefined or item.item.remove != True
  notify: restart wg0

- name: set up port forwards for clients
  ansible.builtin.iptables:
    table: nat
    chain: PREROUTING
    protocol: "{{ item.1.proto }}"
    #match: "{{ item.1.proto }}"
    destination_port: "{{ item.1.from }}"
    to_destination: "{{ item.0.wg_ip }}:{{ item.1.to }}"
    jump: DNAT
    comment: "WGFWD-{{ item.0.name }}: {{ item.1.comment | default('') }}"
    state: "{% if item.1.remove is defined and item.1.remove == True %}absent{% else %}present{% endif %}"
  with_subelements:
    - "{{ wg_clients }}"
    - iptables_forward_ports
    - skip_missing: True
    

- name: iptables rule for communication from client to wg server
  ansible.builtin.iptables:
    action: append
    chain: FORWARD
    destination: "{{ wg_subnet.server_ip }}/32"
    source: "{{ item.wg_ip }}"
    jump: ACCEPT
    state: "{% if item.item.remove is defined and item.item.remove == True %}absent{% else %}present{% endif %}"
  loop: "{{ wg_clients }}"

- name: iptables rule for communication from client to wg server
  ansible.builtin.iptables:
    action: append
    chain: FORWARD
    destination: "{{ wg_subnet.server_ip }}{{ wg_subnet.cidr }}"
    source: "{{ item.wg_ip }}"
    jump: ACCEPT
    state: "{% if item.block_client_communication is undefined or item.block_client_communication == True %}absent{% else %}present{% endif %}"
  loop: "{{ wg_clients }}"


- name: iptables rule for communication from client to wg_subnet
  ansible.builtin.iptables:
    action: append
    chain: FORWARD
    destination: "{{ wg_subnet.network }}{{ wg_subnet.cidr }}"
    source: "{{ item.wg_ip }}"
    ctstate: [ NEW ]
    jump: REJECT
    state: "{% if item.block_client_communication is undefined or item.block_client_communication == True %}present{% else %}absent{% endif %}"
  loop: "{{ wg_clients }}"
